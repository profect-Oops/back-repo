plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'maven-publish'
}

group = 'org.oops'
version = '1.0-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.12"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    ignoreFailures = true
}
jacocoTestReport {
    reports {
        dependsOn test
        reports {
            html.required = true
            xml.required = true
        }

        // QueryDSL QDomain 제외시키기
        def QDomains = []

        for (qPattern in '**/QA'..'**/QZ') {
            QDomains.add(qPattern + '*')
        }
        afterEvaluate {
            classDirectories.setFrom(
                    // 그 외의 매칭되는 클래스도 제외 대상
                    files(classDirectories.files.collect {
                        fileTree(dir: it, excludes: [
                                "org/oops/domain/**",
                                "org/oops/global/**",
                                "org/oops/api/common/**",
                                "**/*Application*",
                                "**/*Config*",
                                "**/*Dto*",
                                "**/*DTO*",
                                "**/*Request*",
                                "**/*Response*",
                                "**/*Interceptor*",
                                "**/*Exception*",
                                "org/oops/api/websocket/WebSocketDataHandler"
                        ] + QDomains)
                    })
            )
        }
    }
}
coveralls {
    jacocoReportPath 'build/customJacocoReportDir/test/jacocoTestReport.xml'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    //env 파일 인식
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'
    //소셜로그인 기능 + 스프링 시큐리티
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    //웹소켓
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // OkHttp WebSocket Client
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    // Jackson for JSON Parsing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
    implementation 'org.apache.kafka:kafka-clients:3.8.0'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.2'

    implementation 'ch.qos.logback:logback-classic:1.4.12'
    implementation 'commons-codec:commons-codec:1.15'

    //케싱 및 Redis 통신
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //Mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    //test 라이브러리
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // JUnit 5 dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
    // AssertJ
    testImplementation 'org.assertj:assertj-core:3.22.0'
    // Mockito
    testImplementation 'org.mockito:mockito-core:4.4.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.0'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()

    finalizedBy jacocoTestReport

}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    mainClass = 'org.oops.Main'
}